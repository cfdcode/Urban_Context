/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices
(
	(-2059 -852.866 0) // 0
	(-2059 852.866 0) // 1
	(-852.866 -2059 0) // 2
	(-852.866 2059 0) // 3
	(852.866 -2059 0) // 4
	(852.866 2059 0) // 5
	(2059 -852.866 0) // 6
	(2059 852.866 0) // 7
	
	(-2059 -852.866 1669.2) // 8
	(-2059 852.866 1669.2) // 9
	(-852.866 -2059 1669.2) // 10
	(-852.866 2059 1669.2) // 11
	(852.866 -2059 1669.2) // 12
	(852.866 2059 1669.2) // 13
	(2059 -852.866 1669.2) // 14
	(2059 852.866 1669.2) // 15
);

blocks
(
    hex (0 2 3 1 8 10 11 9)
    (95 229 93) // rectangular slice in the middle x 1706/18=95, y 4118/18=229, z 1669/18=93
    simpleGrading (1 1 1)
    
    hex (2 4 5 3 10 12 13 11)
    (95 229 93) // rectangular slice in the middle x 1706/18=95, y 4118/18=229, z 1669/18=93
    simpleGrading (1 1 1)
    
    hex (4 6 7 5 12 14 15 13)
    (95 229 93) // rectangular slice in the middle x 1706/18=95, y 4118/18=229, z 1669/18=93
    simpleGrading (1 1 1)
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (1 9 8 0)
            (0 8 10 2)
            (2 10 12 4)
        );
    }

    outlet
    {
        type patch;
        faces
        (
            (3 11 13 5)
            (5 13 15 7)
            (7 15 14 6)
        );
    }

    ground
    {
        type wall;
        faces
        (
            (1 3 2 0)
            (3 5 4 2)
            (5 7 6 4)
        );
    }

    upperWall
    {
        type wall;
        faces
        (
            (9 11 10 8)
            (11 13 12 10)
            (13 15 14 12)
        );
    }

    frontAndBack
    {
        type wall;
        faces
        (
            (1 3 11 9)
            (4 6 14 12)
        );
    }

);

// ************************************************************************* //


